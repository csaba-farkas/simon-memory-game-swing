package view;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Hashtable;
import java.util.ResourceBundle;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import controller.MemoryGameController;

public class NewPlayerDialog extends JDialog implements KeyListener {

	/**
	 * <p>This dialog is displayed every time a new game is started. This class extends 
	 * {@link JDialog} and implements {@link KeyListener}.</p>
	 * 
	 * <p>Date of last modification: 27/11/2015.</p>
	 * 
	 * @author Csaba Farkas csaba.farkas@mycit.ie
	 */
	
	private JLabel nameLabel;
	private JLabel sliderLabel;
	private JTextField nameField;
	private JSlider slider;
	private JButton cancelButton;
	private JButton createButton;
	private ResourceBundle bundle;
	private String playerName;
	private JFrame parent;
	
	/**
	 * <p>Constructor method which creates an instance of this class. I used inline 
	 * commenting because it's a long method.</p>
	 * 
	 * @param parent is the {@link JFrame} containing this dialog.
	 * @param playerName defines player's name.
	 */
	public NewPlayerDialog(JFrame parent, String playerName) {
		super();
		
		//Initialize field variables.
		this.bundle = ResourceBundle.getBundle("view.newPlayerDialogProps");
		this.parent = parent;
		this.playerName = playerName;
		this.nameLabel = new JLabel(this.bundle.getString("enterName"));
		this.nameField = new JTextField(12);
		this.nameField.setText(playerName);
		this.nameField.selectAll();
		this.nameField.getDocument().addDocumentListener(new DocumentListener() {

			/**
			 * I attached a DocumentListener to the JTextField. Launch button is
			 * enabled only if JTextField has contents (whitespaces are trimmed).
			 * DocumentListener captures any change, insert or remove event
			 * generated by the JTextField.
			 */
			@Override
			public void changedUpdate(DocumentEvent e) {
				createButton.setEnabled(checkTextFieldContent());
			}

			@Override
			public void insertUpdate(DocumentEvent e) {
				createButton.setEnabled(checkTextFieldContent());
			}

			@Override
			public void removeUpdate(DocumentEvent e) {
				createButton.setEnabled(checkTextFieldContent());
			}

			private boolean checkTextFieldContent() {
				return (nameField.getText() != null) && (!nameField.getText().trim().isEmpty());
			}
			
		});
		
		//This class is also a key listener class, because it implements it's methods.
		//I attach key listener to the text field and the slider, so when enter is pressed
		//a new game is created.
		this.nameField.addKeyListener(this);
		
		//Create slider with 3 ticks and label them with custom labels, using a hashtable.
		//Slider snaps to each tick
		this.sliderLabel = new JLabel(this.bundle.getString("difficulty"));
		this.slider = new JSlider();
		this.slider.setMajorTickSpacing(50);
		this.slider.setPaintTicks(true);
		this.slider.addKeyListener(this);
		Hashtable<Integer, JLabel> table = new Hashtable<>();
		table.put(0, new JLabel(this.bundle.getString("easy")));
		table.put(50, new JLabel(this.bundle.getString("medium")));
		table.put(99, new JLabel(this.bundle.getString("hard")));
		this.slider.setLabelTable(table);
		this.slider.setPaintLabels(true);
		this.slider.setSnapToTicks(true);
		
		//Create cancel button and attach an action listener to it which closes this
		//dialog when cancel is clicked on.
		this.cancelButton = new JButton(this.bundle.getString("cancel"));
		this.cancelButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				dispose();
			}
			
		});
		
		//Create "create" button and attach an action listener to it which creates a new 
		//player when it is clicked on.
		this.createButton = new JButton(this.bundle.getString("create"));
		this.createButton.addKeyListener(this);
		this.createButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				createNewPlayer();
			}
		});
		
		//When a player loses a game and decides to play a new game, his name is automatically
		//inserted into the text field. So I only get the "create" button disabled, if the text 
		//field has no content.
		if(nameField.getText().length() == 0) {
			this.createButton.setEnabled(false);
		}
		
		//Create a JPanel and add the Components to it. Set layout to GridBagLayout
		JPanel panel = new JPanel();
		panel.setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		
		c.gridx = 0;
		c.gridy = 0;
		c.insets.bottom = 25;
		c.anchor = GridBagConstraints.WEST;
		
		panel.add(this.nameLabel, c);
		
		c.gridx++;
		
		panel.add(this.nameField, c);
		
		c.gridx--;
		c.gridy++;
		c.insets.bottom = 10;
		
		panel.add(this.sliderLabel, c);
		
		c.gridy++;
		c.gridwidth = 2;
		c.insets.bottom = 25;
		c.anchor = GridBagConstraints.CENTER;
		
		panel.add(this.slider, c);
		
		c.gridy++;
		c.gridwidth = 1;
		c.anchor = GridBagConstraints.EAST;
		c.insets.right = 10;
		c.insets.bottom = 0;
		
		panel.add(this.cancelButton, c);
		
		c.gridx++;
		c.insets.left = 10;
		c.anchor = GridBagConstraints.WEST;
		
		panel.add(this.createButton, c);
		
		//Give the panel some padding
		panel.setBorder(BorderFactory.createEmptyBorder(30, 30, 30, 30));
		this.getContentPane().add(panel);
		
		//Set the title of the dialog box and set its mode to APPLICATION_MODAL so 
		//when dialog is displayed, the main frame is disabled.
		this.setTitle(this.bundle.getString("newGame"));
		this.setModalityType(ModalityType.APPLICATION_MODAL);
		
		this.pack();
		
		//I copy+paste this block of code from class to class to position a window in
		//the middle of the screen.
		Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();      //Get the size of the screen
        int frameWidth = this.getSize().width;
        int frameHeigth = this.getSize().height;
        int locationX = (dimension.width - frameWidth)/2;                //X coordinate = (width of screen - width of frame) / 2
        int locationY = (dimension.height - frameHeigth)/2;              //Y coordinate = (height of screen - height of frame) / 2
        this.setLocation(locationX, locationY);this.setVisible(true);
	}
	
	/**
	 * <p>This private method creates and new player with the help of the controller and sets the 
	 * difficulty of the game based on the value of the JSlider.</p>
	 */
	private void createNewPlayer() {
		//Create player
		String playerName = nameField.getText().trim();
		MemoryGameController.getInstance().createPlayer(playerName);
		
		//Create game
		if(slider.getValue() == 0) {
			MemoryGameController.getInstance().createNewGame(MemoryGameController.EASY_DIFFICULTY);
		} else if(slider.getValue() == 50) {
			MemoryGameController.getInstance().createNewGame(MemoryGameController.MEDIUM_DIFFICULTY);
		} else {
			MemoryGameController.getInstance().createNewGame(MemoryGameController.HARD_DIFFICULTY);
		}
		
		MemoryGameController.getInstance().getGuiReference().runGame();
		dispose();
	}
	
	/**
	 * <p>Overriden {@link KeyListener} method. When enter is pressed, createNewPlayer() 
	 * is called.</p>
	 */
	@Override
	public void keyPressed(KeyEvent arg0) {
		if(arg0.getKeyCode() == KeyEvent.VK_ENTER) {
			if(nameField.getText().length() > 0) {
				createNewPlayer();
			}
		}
	}
	
	@Override
	public void keyReleased(KeyEvent arg0) {
		
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		
	}
}
